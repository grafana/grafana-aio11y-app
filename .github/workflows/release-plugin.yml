# This GitHub Action automates the process of building Grafana plugins.
# (For more information, see https://github.com/grafana/plugin-actions/blob/main/build-plugin/README.md)
name: Release

on:
  push:
    tags:
      - "v*.*.*" # Run workflow on version tags, e.g. v1.0.0.

jobs:
  release:
    name: Release plugin
    runs-on: ubuntu-latest
    permissions:
      contents: write
      packages: write
      id-token: write
      repository-projects: write
    outputs:
      pluginId: ${{ steps.metadata.outputs.plugin-id }}
      pluginVersion: ${{ steps.metadata.outputs.plugin-version }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup Node.js environment
        uses: actions/setup-node@v2.1.2
        with:
          node-version: "20"

      - name: Get yarn cache directory path
        id: cd frontend && yarn-cache-dir-path
        run: echo "dir=$(yarn cache dir)" >> $GITHUB_OUTPUT

      - name: Cache yarn cache
        uses: actions/cache@v2
        id: cache-yarn-cache
        with:
          path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
          key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-yarn-


      - name: Cache node_modules
        id: cache-node-modules
        uses: actions/cache@v2
        with:
          path: node_modules
          key: ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-${{ hashFiles('**/yarn.lock') }}
          restore-keys: |
            ${{ runner.os }}-${{ matrix.node-version }}-nodemodules-


      - name: Install dependencies
        run: |
          printenv GCP_KEY
          printenv GCP_KEY > /tmp/gcpkey.json
          export GOOGLE_APPLICATION_CREDENTIALS=/tmp/gcpkey.json
          yarn authenticate-npm
          rm /tmp/gcpkey.json
          yarn install --frozen-lockfile
        env:
          GCP_KEY: ${{ secrets.GCP_CONTAINERS_SA_JSON }}
        if: |
          steps.cache-yarn-cache.outputs.cache-hit != 'true' ||
          steps.cache-node-modules.outputs.cache-hit != 'true'


      - name: Build and test frontend
        run: cd frontend && yarn build

      - name: Sign plugin
        run: cd frontend && yarn sign
        env:
          GRAFANA_ACCESS_POLICY_TOKEN: ${{ secrets.GRAFANA_ACCESS_POLICY_TOKEN }}

      - name: Get plugin metadata
        id: metadata
        run: |
          cd frontend &&
          sudo apt-get install jq

          export GRAFANA_PLUGIN_ID=$(cat dist/plugin.json | jq -r .id)
          export GRAFANA_PLUGIN_VERSION=$(cat dist/plugin.json | jq -r .info.version)
          export GRAFANA_PLUGIN_TYPE=$(cat dist/plugin.json | jq -r .type)
          export GRAFANA_PLUGIN_ARTIFACT=${GRAFANA_PLUGIN_ID}-${GRAFANA_PLUGIN_VERSION}.zip
          export GRAFANA_PLUGIN_ARTIFACT_CHECKSUM=${GRAFANA_PLUGIN_ARTIFACT}.md5
          export GRAFANA_PLUGIN_ARTIFACT_ANY=${GRAFANA_PLUGIN_ID}-${GRAFANA_PLUGIN_VERSION}.any.zip
          export GRAFANA_PLUGIN_ARTIFACT_ANY_SHA1SUM=${GRAFANA_PLUGIN_ARTIFACT_ANY}.sha1
          export GRAFANA_PLUGIN_ARTIFACT_LATEST=${GRAFANA_PLUGIN_ID}-latest.zip
          export GRAFANA_PLUGIN_ARTIFACT_ANY_LATEST=${GRAFANA_PLUGIN_ID}-latest.any.zip
          export GRAFANA_PLUGIN_ARTIFACT_ANY_LATEST_SHA1SUM=${GRAFANA_PLUGIN_ARTIFACT_ANY_LATEST}.sha1

          echo "plugin-id=${GRAFANA_PLUGIN_ID}" >> $GITHUB_OUTPUT
          echo "plugin-version=${GRAFANA_PLUGIN_VERSION}" >> $GITHUB_OUTPUT
          echo "archive=${GRAFANA_PLUGIN_ARTIFACT}" >> $GITHUB_OUTPUT
          echo "archive-checksum=${GRAFANA_PLUGIN_ARTIFACT_CHECKSUM}" >> $GITHUB_OUTPUT
          echo "archive-any=${GRAFANA_PLUGIN_ARTIFACT_ANY}" >> $GITHUB_OUTPUT
          echo "archive-any-sha1sum=${GRAFANA_PLUGIN_ARTIFACT_ANY_SHA1SUM}" >> $GITHUB_OUTPUT
          echo "archive-latest=${GRAFANA_PLUGIN_ARTIFACT_LATEST}" >> $GITHUB_OUTPUT
          echo "archive-any-latest=${GRAFANA_PLUGIN_ARTIFACT_ANY_LATEST}" >> $GITHUB_OUTPUT
          echo "archive-any-latest-sha1sum=${GRAFANA_PLUGIN_ARTIFACT_ANY_LATEST_SHA1SUM}" >> $GITHUB_OUTPUT
          echo "github-tag=${GITHUB_REF#refs/*/}" >> $GITHUB_OUTPUT

      - name: Package plugin
        id: package-plugin
        run: |
          cd frontend &&
          mv dist ${{ steps.metadata.outputs.plugin-id }}
          zip ${{ steps.metadata.outputs.archive }} ${{ steps.metadata.outputs.plugin-id }} -r
          md5sum ${{ steps.metadata.outputs.archive }} > ${{ steps.metadata.outputs.archive-checksum }}
          zip ${{ steps.metadata.outputs.archive-any }} ${{ steps.metadata.outputs.plugin-id }} -r
          sha1sum ${{ steps.metadata.outputs.archive-any }} | cut -f1 -d' ' > ${{ steps.metadata.outputs.archive-any-sha1sum }}
          echo "checksum=$(cat ./${{ steps.metadata.outputs.archive-checksum }} | cut -d' ' -f1)" >> $GITHUB_OUTPUT
          zip ${{ steps.metadata.outputs.archive-any-latest }} ${{ steps.metadata.outputs.plugin-id }} -r
          sha1sum ${{ steps.metadata.outputs.archive-any-latest }} | cut -f1 -d' ' > ${{ steps.metadata.outputs.archive-any-latest-sha1sum }}
          zip ${{ steps.metadata.outputs.archive-latest }} ${{ steps.metadata.outputs.plugin-id }} -r
          mkdir artifacts
          mv ${{ steps.metadata.outputs.archive-any }} ${{ steps.metadata.outputs.archive-any-sha1sum }} artifacts
          mkdir -p latest/any
          mv ${{ steps.metadata.outputs.archive-any-latest }} ${{ steps.metadata.outputs.archive-any-latest-sha1sum }} latest/any
          mv ${{ steps.metadata.outputs.archive-latest }} latest

      - name: Create release
        id: create_release
        uses: actions/create-release@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          tag_name: ${{ github.ref }}
          release_name: Release ${{ github.ref }}
          body_path: ${{ steps.changelog.outputs.path }}

      - name: Add plugin to release
        id: upload-plugin-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.metadata.outputs.archive }}
          asset_name: ${{ steps.metadata.outputs.archive }}
          asset_content_type: application/zip

      - name: Add checksum to release
        id: upload-checksum-asset
        uses: actions/upload-release-asset@v1
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
        with:
          upload_url: ${{ steps.create_release.outputs.upload_url }}
          asset_path: ./${{ steps.metadata.outputs.archive-checksum }}
          asset_name: ${{ steps.metadata.outputs.archive-checksum }}
          asset_content_type: text/plain

      - id: get-secrets
        uses: grafana/shared-workflows/actions/get-vault-secrets@main
        with:
          common_secrets: |
            GCP_UPLOAD_ARTIFACTS_KEY=grafana/integration-artifacts-uploader-service-account:'credentials.json'

      - id: 'auth'
        uses: 'google-github-actions/auth@v2'
        with:
          credentials_json: ${{ env.GCP_UPLOAD_ARTIFACTS_KEY }}

      - id: 'upload-release-artifacts-by-version'
        name: 'Upload release artifacts by version'
        uses: google-github-actions/upload-cloud-storage@v2
        with:
          path: artifacts
          destination: 'integration-artifacts/${{ steps.metadata.outputs.plugin-id }}/release/${{ steps.metadata.outputs.plugin-version }}/any'
          parent: false

      - id: upload-release-latest-artifacts
        name: Upload release latest artifacts
        uses: google-github-actions/upload-cloud-storage@v2
        with:
          path: latest
          destination: 'integration-artifacts/${{ steps.metadata.outputs.plugin-id }}/release/latest'
          parent: false
